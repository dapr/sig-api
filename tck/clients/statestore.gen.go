// Package clients provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package clients

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for GetStateParamsConsistency.
const (
	Eventual GetStateParamsConsistency = "eventual"
	Strong   GetStateParamsConsistency = "strong"
)

// StateGetResponse defines model for StateGetResponse.
type StateGetResponse = map[string]interface{}

// StateRequest defines model for StateRequest.
type StateRequest struct {
	// Etag state ETag
	Etag *string `json:"etag,omitempty"`

	// Key state key
	Key string `json:"key"`

	// Metadata additional key-value pairs to be passed to the state store
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Options state operation options, see state operation options
	Options *string `json:"options,omitempty"`

	// Value state value, which can be any byte array
	Value string `json:"value"`
}

// StateRequestArray defines model for StateRequestArray.
type StateRequestArray = []StateRequest

// GetStateParams defines parameters for GetState.
type GetStateParams struct {
	// Consistency read consistency mode
	Consistency *GetStateParamsConsistency `form:"consistency,omitempty" json:"consistency,omitempty"`

	// Metadata metadata as query parameters to the state store
	Metadata *map[string]interface{} `form:"metadata,omitempty" json:"metadata,omitempty"`
}

// GetStateParamsConsistency defines parameters for GetState.
type GetStateParamsConsistency string

// StoreStateJSONRequestBody defines body for StoreState for application/json ContentType.
type StoreStateJSONRequestBody = StateRequestArray

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// StoreState request with any body
	StoreStateWithBody(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StoreState(ctx context.Context, statestore string, body StoreStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteState request
	DeleteState(ctx context.Context, statestore string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetState request
	GetState(ctx context.Context, statestore string, key string, params *GetStateParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) StoreStateWithBody(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoreStateRequestWithBody(c.Server, statestore, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoreState(ctx context.Context, statestore string, body StoreStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoreStateRequest(c.Server, statestore, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteState(ctx context.Context, statestore string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStateRequest(c.Server, statestore, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetState(ctx context.Context, statestore string, key string, params *GetStateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStateRequest(c.Server, statestore, key, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewStoreStateRequest calls the generic StoreState builder with application/json body
func NewStoreStateRequest(server string, statestore string, body StoreStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStoreStateRequestWithBody(server, statestore, "application/json", bodyReader)
}

// NewStoreStateRequestWithBody generates requests for StoreState with any type of body
func NewStoreStateRequestWithBody(server string, statestore string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statestore", runtime.ParamLocationPath, statestore)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1.0/state/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStateRequest generates requests for DeleteState
func NewDeleteStateRequest(server string, statestore string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statestore", runtime.ParamLocationPath, statestore)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1.0/state/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStateRequest generates requests for GetState
func NewGetStateRequest(server string, statestore string, key string, params *GetStateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statestore", runtime.ParamLocationPath, statestore)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1.0/state/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Consistency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "consistency", runtime.ParamLocationQuery, *params.Consistency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Metadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metadata", runtime.ParamLocationQuery, *params.Metadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// StoreState request with any body
	StoreStateWithBodyWithResponse(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StoreStateResponse, error)

	StoreStateWithResponse(ctx context.Context, statestore string, body StoreStateJSONRequestBody, reqEditors ...RequestEditorFn) (*StoreStateResponse, error)

	// DeleteState request
	DeleteStateWithResponse(ctx context.Context, statestore string, key string, reqEditors ...RequestEditorFn) (*DeleteStateResponse, error)

	// GetState request
	GetStateWithResponse(ctx context.Context, statestore string, key string, params *GetStateParams, reqEditors ...RequestEditorFn) (*GetStateResponse, error)
}

type StoreStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StoreStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StoreStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StateGetResponse
}

// Status returns HTTPResponse.Status
func (r GetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// StoreStateWithBodyWithResponse request with arbitrary body returning *StoreStateResponse
func (c *ClientWithResponses) StoreStateWithBodyWithResponse(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StoreStateResponse, error) {
	rsp, err := c.StoreStateWithBody(ctx, statestore, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoreStateResponse(rsp)
}

func (c *ClientWithResponses) StoreStateWithResponse(ctx context.Context, statestore string, body StoreStateJSONRequestBody, reqEditors ...RequestEditorFn) (*StoreStateResponse, error) {
	rsp, err := c.StoreState(ctx, statestore, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoreStateResponse(rsp)
}

// DeleteStateWithResponse request returning *DeleteStateResponse
func (c *ClientWithResponses) DeleteStateWithResponse(ctx context.Context, statestore string, key string, reqEditors ...RequestEditorFn) (*DeleteStateResponse, error) {
	rsp, err := c.DeleteState(ctx, statestore, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStateResponse(rsp)
}

// GetStateWithResponse request returning *GetStateResponse
func (c *ClientWithResponses) GetStateWithResponse(ctx context.Context, statestore string, key string, params *GetStateParams, reqEditors ...RequestEditorFn) (*GetStateResponse, error) {
	rsp, err := c.GetState(ctx, statestore, key, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStateResponse(rsp)
}

// ParseStoreStateResponse parses an HTTP response from a StoreStateWithResponse call
func ParseStoreStateResponse(rsp *http.Response) (*StoreStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StoreStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteStateResponse parses an HTTP response from a DeleteStateWithResponse call
func ParseDeleteStateResponse(rsp *http.Response) (*DeleteStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStateResponse parses an HTTP response from a GetStateWithResponse call
func ParseGetStateResponse(rsp *http.Response) (*GetStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StateGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX3W/bNhD/Vw7cHlVJbdoXPc3rF4IOW1B3e2mDgaFOFhuJVI+UU8Hw/z7wKNtyLKct",
	"UGB5CiPyPn53v/vwRijbdtag8U4UG+FUja3k49JLj2/Rv0fXWeMwfPNDh6IQ9uYzKi+2SXz0Hr/06Hx4",
	"0JHtkLxGVoFersLfEp0i3XltjSiECzLw+oNciWSn0XnSZhU03uJwTiRczUi06GUpvTwVk2Wpw1E2QfbJ",
	"WjY9Qic1OfAWbsLZOSzDP75GiFact4QHOwesltW6c94F4DJ8gfFhAg53Sk8u54Cwf+fU82UCd7VWNShp",
	"gvvSDHAzeARJJGdis00E4ZdeE5ai+Chi/KKV6+ThZC5YY7ER2mPLmH8lrEQhfskOjMlGumRHNNjuVUe3",
	"tsEP/OqRjGxeWTUTwTfalGB7D60lBHkTjq9kRyIRPTWiELX3nSuyrJQdpdpmwYg2lQ2qlDVeKqYftlKH",
	"50428sYOv5VarkiXqbZB4Njmh1o70I4zz/5z4tksvNxBhMXVJbgOla604gSm8LfTZgU+iC+uLh2IRDRa",
	"4VgiRrYB+qKTqkZ4luZHGIosu7u7SyXfppZW2Sjqsj8uX77+c/n6ybM0T2vfNhxHpNb9VS2R1lrhXBwS",
	"4bVvwhU7PgESfAvpRnIR8NM0T/NIZDSy06IQF2meXohEdNLXnJZs/TTNM2ZctnF7ZVuubRtr/DiMSzYW",
	"OTrW0X1P9tEUbDsWwmW5E+aX7ATJFj2SE8XHUzN7dRXZFu5qJDZI6EnjGoFbQGCFKBiPSHa5OOAQ04Lw",
	"1GMydrxJc9sXz3V8jM7/bsthx7QAo9gI2XXNyIjsswsubiaqvrdWFocCOYb7TyhS7lLRb67k2Ic5T8/y",
	"53Op4P4l11gGged5fvYNB1I7aLVjNlsKR2VNpVc9RfkXc/ILA0hkCaxSPRGWCaga1e0h8Y1dOW49rm9b",
	"ScM8R5bTnHi5CjmPiRLXQfgcEbPNLQ7b6FeDfqZdvuLvozXmisf6BzgZ5b+LlLvJkwaiQaWxKUEbxtc7",
	"JDjEczpbYE8KGGTbpHDVoHQIhBXSxFFYjq+jkjg+nKde+Z4QWjThC5ahX64x/ancT+5DDZhucQBbMbwS",
	"nd7Dmrccp80Pltu3KB6TU8I7HMD1SqFzVd80w+Pi+wwFv0X5RKxwpru+RR+dL+9r+35Cv0X/WFvs/0Cz",
	"E5OEsgxF5rTzaNQArS33tr70SMPB2OSZmBpB07cxm2RNWGtxjcb3spnsWec92LURkA7YIBzyNL+b4lfZ",
	"djz1N/Dp0IY6SZ4X3nc4fBJFuBqOv8GWpbsmYBxjNQd0v1PPhPKwMDo/sBOVpVbMFHD+c4fm9MfIzMyM",
	"pb4ja3nSHx6YmaGdaAfGeqhsbx7Z+IxNIBh+E+ry4dEZJJHWuxI/Wj0bq2RTW+eLixd5nslOZ+sLTtyo",
	"5oGWMK6TP7LH39usF1eXp/u8VS7dLbM8ANEoZM8Y0b/hFKI57TNie739LwAA//8HMa0luQ4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
