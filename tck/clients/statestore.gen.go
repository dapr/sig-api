// Package statestore provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package statestore

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for GetStateParamsConsistency.
const (
	Eventual GetStateParamsConsistency = "eventual"
	Strong   GetStateParamsConsistency = "strong"
)

// StateGetResponse defines model for StateGetResponse.
type StateGetResponse = map[string]interface{}

// StateRequest defines model for StateRequest.
type StateRequest struct {
	// Etag state ETag
	Etag *string `json:"etag,omitempty"`

	// Key state key
	Key string `json:"key"`

	// Metadata additional key-value pairs to be passed to the state store
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Options state operation options, see state operation options
	Options *string `json:"options,omitempty"`

	// Value state value, which can be any byte array
	Value string `json:"value"`
}

// StateRequestArray defines model for StateRequestArray.
type StateRequestArray = []StateRequest

// GetStateParams defines parameters for GetState.
type GetStateParams struct {
	// Consistency read consistency mode
	Consistency *GetStateParamsConsistency `form:"consistency,omitempty" json:"consistency,omitempty"`

	// Metadata metadata as query parameters to the state store
	Metadata *map[string]interface{} `form:"metadata,omitempty" json:"metadata,omitempty"`
}

// GetStateParamsConsistency defines parameters for GetState.
type GetStateParamsConsistency string

// PostStoreStateJSONRequestBody defines body for PostStoreState for application/json ContentType.
type PostStoreStateJSONRequestBody = StateRequestArray

// PutStoreStateJSONRequestBody defines body for PutStoreState for application/json ContentType.
type PutStoreStateJSONRequestBody = StateRequestArray

// PostBulkGetStateJSONRequestBody defines body for PostBulkGetState for application/json ContentType.
type PostBulkGetStateJSONRequestBody = StateRequestArray

// PutBulkGetStateJSONRequestBody defines body for PutBulkGetState for application/json ContentType.
type PutBulkGetStateJSONRequestBody = StateRequestArray

// PostTransactionSetStateJSONRequestBody defines body for PostTransactionSetState for application/json ContentType.
type PostTransactionSetStateJSONRequestBody = StateRequestArray

// PutTransactionSetStateJSONRequestBody defines body for PutTransactionSetState for application/json ContentType.
type PutTransactionSetStateJSONRequestBody = StateRequestArray

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostStoreState request with any body
	PostStoreStateWithBody(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStoreState(ctx context.Context, statestore string, body PostStoreStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutStoreState request with any body
	PutStoreStateWithBody(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutStoreState(ctx context.Context, statestore string, body PutStoreStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBulkGetState request with any body
	PostBulkGetStateWithBody(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBulkGetState(ctx context.Context, statestore string, body PostBulkGetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBulkGetState request with any body
	PutBulkGetStateWithBody(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBulkGetState(ctx context.Context, statestore string, body PutBulkGetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTransactionSetState request with any body
	PostTransactionSetStateWithBody(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTransactionSetState(ctx context.Context, statestore string, body PostTransactionSetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTransactionSetState request with any body
	PutTransactionSetStateWithBody(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTransactionSetState(ctx context.Context, statestore string, body PutTransactionSetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteState request
	DeleteState(ctx context.Context, statestore string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetState request
	GetState(ctx context.Context, statestore string, key string, params *GetStateParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostStoreStateWithBody(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStoreStateRequestWithBody(c.Server, statestore, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStoreState(ctx context.Context, statestore string, body PostStoreStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStoreStateRequest(c.Server, statestore, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStoreStateWithBody(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStoreStateRequestWithBody(c.Server, statestore, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStoreState(ctx context.Context, statestore string, body PutStoreStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStoreStateRequest(c.Server, statestore, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBulkGetStateWithBody(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBulkGetStateRequestWithBody(c.Server, statestore, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBulkGetState(ctx context.Context, statestore string, body PostBulkGetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBulkGetStateRequest(c.Server, statestore, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBulkGetStateWithBody(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBulkGetStateRequestWithBody(c.Server, statestore, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBulkGetState(ctx context.Context, statestore string, body PutBulkGetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBulkGetStateRequest(c.Server, statestore, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTransactionSetStateWithBody(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransactionSetStateRequestWithBody(c.Server, statestore, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTransactionSetState(ctx context.Context, statestore string, body PostTransactionSetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransactionSetStateRequest(c.Server, statestore, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTransactionSetStateWithBody(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTransactionSetStateRequestWithBody(c.Server, statestore, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTransactionSetState(ctx context.Context, statestore string, body PutTransactionSetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTransactionSetStateRequest(c.Server, statestore, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteState(ctx context.Context, statestore string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStateRequest(c.Server, statestore, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetState(ctx context.Context, statestore string, key string, params *GetStateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStateRequest(c.Server, statestore, key, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostStoreStateRequest calls the generic PostStoreState builder with application/json body
func NewPostStoreStateRequest(server string, statestore string, body PostStoreStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStoreStateRequestWithBody(server, statestore, "application/json", bodyReader)
}

// NewPostStoreStateRequestWithBody generates requests for PostStoreState with any type of body
func NewPostStoreStateRequestWithBody(server string, statestore string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statestore", runtime.ParamLocationPath, statestore)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1.0/state/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutStoreStateRequest calls the generic PutStoreState builder with application/json body
func NewPutStoreStateRequest(server string, statestore string, body PutStoreStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutStoreStateRequestWithBody(server, statestore, "application/json", bodyReader)
}

// NewPutStoreStateRequestWithBody generates requests for PutStoreState with any type of body
func NewPutStoreStateRequestWithBody(server string, statestore string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statestore", runtime.ParamLocationPath, statestore)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1.0/state/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBulkGetStateRequest calls the generic PostBulkGetState builder with application/json body
func NewPostBulkGetStateRequest(server string, statestore string, body PostBulkGetStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBulkGetStateRequestWithBody(server, statestore, "application/json", bodyReader)
}

// NewPostBulkGetStateRequestWithBody generates requests for PostBulkGetState with any type of body
func NewPostBulkGetStateRequestWithBody(server string, statestore string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statestore", runtime.ParamLocationPath, statestore)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1.0/state/%s/bulk", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutBulkGetStateRequest calls the generic PutBulkGetState builder with application/json body
func NewPutBulkGetStateRequest(server string, statestore string, body PutBulkGetStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBulkGetStateRequestWithBody(server, statestore, "application/json", bodyReader)
}

// NewPutBulkGetStateRequestWithBody generates requests for PutBulkGetState with any type of body
func NewPutBulkGetStateRequestWithBody(server string, statestore string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statestore", runtime.ParamLocationPath, statestore)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1.0/state/%s/bulk", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTransactionSetStateRequest calls the generic PostTransactionSetState builder with application/json body
func NewPostTransactionSetStateRequest(server string, statestore string, body PostTransactionSetStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTransactionSetStateRequestWithBody(server, statestore, "application/json", bodyReader)
}

// NewPostTransactionSetStateRequestWithBody generates requests for PostTransactionSetState with any type of body
func NewPostTransactionSetStateRequestWithBody(server string, statestore string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statestore", runtime.ParamLocationPath, statestore)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1.0/state/%s/transaction", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutTransactionSetStateRequest calls the generic PutTransactionSetState builder with application/json body
func NewPutTransactionSetStateRequest(server string, statestore string, body PutTransactionSetStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTransactionSetStateRequestWithBody(server, statestore, "application/json", bodyReader)
}

// NewPutTransactionSetStateRequestWithBody generates requests for PutTransactionSetState with any type of body
func NewPutTransactionSetStateRequestWithBody(server string, statestore string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statestore", runtime.ParamLocationPath, statestore)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1.0/state/%s/transaction", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStateRequest generates requests for DeleteState
func NewDeleteStateRequest(server string, statestore string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statestore", runtime.ParamLocationPath, statestore)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1.0/state/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStateRequest generates requests for GetState
func NewGetStateRequest(server string, statestore string, key string, params *GetStateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statestore", runtime.ParamLocationPath, statestore)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1.0/state/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Consistency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "consistency", runtime.ParamLocationQuery, *params.Consistency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Metadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metadata", runtime.ParamLocationQuery, *params.Metadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostStoreState request with any body
	PostStoreStateWithBodyWithResponse(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStoreStateResponse, error)

	PostStoreStateWithResponse(ctx context.Context, statestore string, body PostStoreStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStoreStateResponse, error)

	// PutStoreState request with any body
	PutStoreStateWithBodyWithResponse(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStoreStateResponse, error)

	PutStoreStateWithResponse(ctx context.Context, statestore string, body PutStoreStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStoreStateResponse, error)

	// PostBulkGetState request with any body
	PostBulkGetStateWithBodyWithResponse(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBulkGetStateResponse, error)

	PostBulkGetStateWithResponse(ctx context.Context, statestore string, body PostBulkGetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBulkGetStateResponse, error)

	// PutBulkGetState request with any body
	PutBulkGetStateWithBodyWithResponse(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBulkGetStateResponse, error)

	PutBulkGetStateWithResponse(ctx context.Context, statestore string, body PutBulkGetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBulkGetStateResponse, error)

	// PostTransactionSetState request with any body
	PostTransactionSetStateWithBodyWithResponse(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTransactionSetStateResponse, error)

	PostTransactionSetStateWithResponse(ctx context.Context, statestore string, body PostTransactionSetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionSetStateResponse, error)

	// PutTransactionSetState request with any body
	PutTransactionSetStateWithBodyWithResponse(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTransactionSetStateResponse, error)

	PutTransactionSetStateWithResponse(ctx context.Context, statestore string, body PutTransactionSetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTransactionSetStateResponse, error)

	// DeleteState request
	DeleteStateWithResponse(ctx context.Context, statestore string, key string, reqEditors ...RequestEditorFn) (*DeleteStateResponse, error)

	// GetState request
	GetStateWithResponse(ctx context.Context, statestore string, key string, params *GetStateParams, reqEditors ...RequestEditorFn) (*GetStateResponse, error)
}

type PostStoreStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostStoreStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStoreStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutStoreStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutStoreStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutStoreStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBulkGetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StateGetResponse
}

// Status returns HTTPResponse.Status
func (r PostBulkGetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBulkGetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBulkGetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StateGetResponse
}

// Status returns HTTPResponse.Status
func (r PutBulkGetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBulkGetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTransactionSetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StateGetResponse
}

// Status returns HTTPResponse.Status
func (r PostTransactionSetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTransactionSetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTransactionSetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StateGetResponse
}

// Status returns HTTPResponse.Status
func (r PutTransactionSetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTransactionSetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StateGetResponse
}

// Status returns HTTPResponse.Status
func (r GetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostStoreStateWithBodyWithResponse request with arbitrary body returning *PostStoreStateResponse
func (c *ClientWithResponses) PostStoreStateWithBodyWithResponse(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStoreStateResponse, error) {
	rsp, err := c.PostStoreStateWithBody(ctx, statestore, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStoreStateResponse(rsp)
}

func (c *ClientWithResponses) PostStoreStateWithResponse(ctx context.Context, statestore string, body PostStoreStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStoreStateResponse, error) {
	rsp, err := c.PostStoreState(ctx, statestore, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStoreStateResponse(rsp)
}

// PutStoreStateWithBodyWithResponse request with arbitrary body returning *PutStoreStateResponse
func (c *ClientWithResponses) PutStoreStateWithBodyWithResponse(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStoreStateResponse, error) {
	rsp, err := c.PutStoreStateWithBody(ctx, statestore, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStoreStateResponse(rsp)
}

func (c *ClientWithResponses) PutStoreStateWithResponse(ctx context.Context, statestore string, body PutStoreStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStoreStateResponse, error) {
	rsp, err := c.PutStoreState(ctx, statestore, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStoreStateResponse(rsp)
}

// PostBulkGetStateWithBodyWithResponse request with arbitrary body returning *PostBulkGetStateResponse
func (c *ClientWithResponses) PostBulkGetStateWithBodyWithResponse(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBulkGetStateResponse, error) {
	rsp, err := c.PostBulkGetStateWithBody(ctx, statestore, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBulkGetStateResponse(rsp)
}

func (c *ClientWithResponses) PostBulkGetStateWithResponse(ctx context.Context, statestore string, body PostBulkGetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBulkGetStateResponse, error) {
	rsp, err := c.PostBulkGetState(ctx, statestore, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBulkGetStateResponse(rsp)
}

// PutBulkGetStateWithBodyWithResponse request with arbitrary body returning *PutBulkGetStateResponse
func (c *ClientWithResponses) PutBulkGetStateWithBodyWithResponse(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBulkGetStateResponse, error) {
	rsp, err := c.PutBulkGetStateWithBody(ctx, statestore, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBulkGetStateResponse(rsp)
}

func (c *ClientWithResponses) PutBulkGetStateWithResponse(ctx context.Context, statestore string, body PutBulkGetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBulkGetStateResponse, error) {
	rsp, err := c.PutBulkGetState(ctx, statestore, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBulkGetStateResponse(rsp)
}

// PostTransactionSetStateWithBodyWithResponse request with arbitrary body returning *PostTransactionSetStateResponse
func (c *ClientWithResponses) PostTransactionSetStateWithBodyWithResponse(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTransactionSetStateResponse, error) {
	rsp, err := c.PostTransactionSetStateWithBody(ctx, statestore, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransactionSetStateResponse(rsp)
}

func (c *ClientWithResponses) PostTransactionSetStateWithResponse(ctx context.Context, statestore string, body PostTransactionSetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionSetStateResponse, error) {
	rsp, err := c.PostTransactionSetState(ctx, statestore, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransactionSetStateResponse(rsp)
}

// PutTransactionSetStateWithBodyWithResponse request with arbitrary body returning *PutTransactionSetStateResponse
func (c *ClientWithResponses) PutTransactionSetStateWithBodyWithResponse(ctx context.Context, statestore string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTransactionSetStateResponse, error) {
	rsp, err := c.PutTransactionSetStateWithBody(ctx, statestore, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTransactionSetStateResponse(rsp)
}

func (c *ClientWithResponses) PutTransactionSetStateWithResponse(ctx context.Context, statestore string, body PutTransactionSetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTransactionSetStateResponse, error) {
	rsp, err := c.PutTransactionSetState(ctx, statestore, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTransactionSetStateResponse(rsp)
}

// DeleteStateWithResponse request returning *DeleteStateResponse
func (c *ClientWithResponses) DeleteStateWithResponse(ctx context.Context, statestore string, key string, reqEditors ...RequestEditorFn) (*DeleteStateResponse, error) {
	rsp, err := c.DeleteState(ctx, statestore, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStateResponse(rsp)
}

// GetStateWithResponse request returning *GetStateResponse
func (c *ClientWithResponses) GetStateWithResponse(ctx context.Context, statestore string, key string, params *GetStateParams, reqEditors ...RequestEditorFn) (*GetStateResponse, error) {
	rsp, err := c.GetState(ctx, statestore, key, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStateResponse(rsp)
}

// ParsePostStoreStateResponse parses an HTTP response from a PostStoreStateWithResponse call
func ParsePostStoreStateResponse(rsp *http.Response) (*PostStoreStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStoreStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutStoreStateResponse parses an HTTP response from a PutStoreStateWithResponse call
func ParsePutStoreStateResponse(rsp *http.Response) (*PutStoreStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutStoreStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostBulkGetStateResponse parses an HTTP response from a PostBulkGetStateWithResponse call
func ParsePostBulkGetStateResponse(rsp *http.Response) (*PostBulkGetStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBulkGetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StateGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutBulkGetStateResponse parses an HTTP response from a PutBulkGetStateWithResponse call
func ParsePutBulkGetStateResponse(rsp *http.Response) (*PutBulkGetStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBulkGetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StateGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTransactionSetStateResponse parses an HTTP response from a PostTransactionSetStateWithResponse call
func ParsePostTransactionSetStateResponse(rsp *http.Response) (*PostTransactionSetStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTransactionSetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StateGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTransactionSetStateResponse parses an HTTP response from a PutTransactionSetStateWithResponse call
func ParsePutTransactionSetStateResponse(rsp *http.Response) (*PutTransactionSetStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTransactionSetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StateGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteStateResponse parses an HTTP response from a DeleteStateWithResponse call
func ParseDeleteStateResponse(rsp *http.Response) (*DeleteStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStateResponse parses an HTTP response from a GetStateWithResponse call
func ParseGetStateResponse(rsp *http.Response) (*GetStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StateGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZW2/bNhT+KwfcHlXJbdoXPS29BUGHLai7vbTBcEwdSawlUuXFqWD4vw8kbctOZDct",
	"UrQb/GRa5Ll/36EoLhlXbackSWtYvmSG19RiGE4tWrog+5ZMp6Qh/8z2HbGcqdlH4patkrjoLX1yZKxf",
	"0GnVkbaCggqyWPnfggzXorNCSZYz42Xg1TusWLLRaKwWsvIa59QfEvFTIxItWSzQ4l0xLArhh9h42UcL",
	"bBxBh0IbsApmfmwMFf6PrQmiFWOVpsHOEKsKas0h73zg6J/AemEChjZK70yOBRL8O6Q+TCZwUwteA0fp",
	"3UfZw6y3BKg1juRmlTBNn5zQVLD8PYv5i1auk+PFPA8a8yUTltoQ86+aSpazX7IBMdkaLtkeDFZb1dGt",
	"lfeDPlvSEpuXio9k8LWQBShnoVWaAGd++BI7zRLmdMNyVlvbmTzLCux0KlTmjQhZKq+KK2mRB/hRi8Iv",
	"N9jgTPW/FQIrLYpUKC+wb/NdLQwIEyof/A+FD2bhxSZEOL+6BNMRF6XgoYAp/GWErMB68fOrSwMsYY3g",
	"tKaIxNaHft4hrwmepJO9GPIsu7m5STHMpkpX2VrUZL9fvnj1x/TVoyfpJK1t24Q8km7Nn+WU9EJwGstD",
	"wqywjZ8Kju8E4n3z5SZtYsCP00k6iUAmiZ1gOTtLJ+kZS1iHtg5lyRaP00kWEJctzVbZKnBbRY7vp3Ea",
	"jEWMrnl025NtNlmwHYlwWbCcXSljg4KwOjiisSVL2rD8/V1TW5WlVi3c1KSDUU1WC1oQhDbgkcHyEBNL",
	"NvUYYmG7pLDaUbLuejsNbkug67iYjH2uin6DNh9KvmTYdc0aFdlH411c7qi6L1/OB5Lsh/u3J2roVNHv",
	"wObYi0OtnkyejpUj9DBcUOEFnk4mB9eERAoDrTAB0Ur7IVeyFJXTUf7ZmPy5BNJaaVCcO62pSIDXxOdD",
	"8RtVmdB+jGtb1P04Tqa7NbFY+ZrHQrHrVcI69+Bwcye0ndA2hrZVcrD1ZTPXzA/3v7CNkCw6JaSFhqyB",
	"XjmoyAJCI4wFVcbN20CpNCBUYkFyOzWn3qSjjfG5a+YXZE9g/RawTh7Wod334BF/IsY3uS7AOM7JmNI1",
	"Te+dO0KeN9R7WkhloVRO/mQ8uiALHodrKgVsfWvr/k5McSeinIjy3yTKsV3HapQGefTp0OZz5V/ujY2H",
	"GF6jrGKxb51mAQ0g7GjEZjiRjm8+74bF0xO1TtT6ke9yZA+9yR0F9v13pu9EI3di0YlF/0MWHdu2lnPq",
	"V9HlhuzI18yX4fneNkn1V5zho/y9qLT5MJx6ekApqClAyBC8M6RhSPUey7fIgR7bJoWrhtB4TJSkdxyF",
	"6Xp1VBK/7hqrHbdOE7Qk/RMqAGdqQemDMja5HaqPaU69f032w4KM2IY1bjl+DP7KJvGl7wGxOEWgwm3m",
	"/DxUGIHgl480FY1sHBeBVGpA0Fbb/QH9E59cfgDM7pjUhIUnmd+gSfIeWlVsbX1ypPvB2M4ytmuEpGtj",
	"NbWSFUsYLUhah83ONchhDzZtxLfJYBCGOo1fHdFnbLvwUX4JH4Y21KG24T7qDfUfWO6n+v1nsArSXeNj",
	"XOdqLNDtlddIKof7HGP74ESpdMtGCHzaWR/s6Bfr/9rz8viJz0uSXmwovncz1CiOTa2Mzc+eTSYZdiJb",
	"nIXCrdUcaQnr256vuWa79RJwfnV597pNcZNu7prCBkiSU/AsRPSPH/ls7vYZtrpe/RsAAP//8t/b0Vge",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
